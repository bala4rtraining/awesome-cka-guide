---
#Stop the service first
#stop the service if it exists
- name: get the service status
  shell: service {{nginx_auth_name}} status warn=false
  register: _service_status
  failed_when: _service_status.rc != 0 and ("unrecognized service" not in _service_status.stderr)
  ignore_errors: true

- name: stop the service if it exists and is running
  service: name={{nginx_auth_name}} state=stopped
  when: _service_status.rc == 0
  
# Create install directory
- name: create nginx_auth install directory
  file:
    path: "{{ nginx_auth_install_dir }}"
    state: directory
    recurse: no
    owner: "{{ nginx_auth_username }}"
    group: "{{ nginx_auth_group }}"
    mode: "0755"

# Download and unarchive tarball
- name: unarchive nginx_auth tarball
  unarchive:
    src: "{{ nginx_auth_artifact_url }}"
    dest: "{{ nginx_auth_install_dir }}"
    copy: no
    validate_certs: no
    owner: "{{ nginx_auth_username }}"
    group: "{{ nginx_auth_group }}"

# Creates log directory
- name: create nginx_auth log directory
  file:
    path: "{{ nginx_auth_log_dir }}"
    state: directory
    recurse: no
    owner: "{{ nginx_auth_username }}"
    group: "{{ nginx_auth_group }}"
    mode: "0755"

# Copy configuration file
- name: copy nginx_auth config file
  template:
    src: "{{ nginx_auth_config_template }}"
    dest: "{{ nginx_auth_install_dir }}/{{ nginx_auth_config }}"
    owner: "{{ nginx_auth_username }}"
    group: "{{ nginx_auth_group }}"
    mode: "0600"

# Deploying logrotate.d/nginx
- name: Add ovn_nginx_auth logrotation file.
  template:
    src: 'ovn_nginx_auth.logrotate.j2'
    dest: /etc/logrotate.d/ovn_nginx_auth
    force: yes
    owner: root
    group: root
    mode: 0644

- name: nginx_auth systemd configuration
  template:
    src: "{{ nginx_auth_service_template }}"
    dest: "/etc/systemd/system/{{ nginx_auth_service }}"
    owner: "{{ nginx_auth_username }}"
    group: "{{ nginx_auth_group }}"
    mode: "0644"
  when: rhel_centos_7
  notify:
    - reload systemd configuration
    - restart nginx_auth

- name: start nginx_auth server
  service: name={{ nginx_auth_name }} enabled=yes state=started
