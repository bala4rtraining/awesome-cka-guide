---
# It deploys dashboards uploaded on artifactory using the grafana dashboard api's

- name: create grafana group
  group:
    name: "grafana"
    state: present

- name: create grafana user
  user:
    name: "grafana"
    group: "grafana"
    createhome: no
    comment: "grafana user"
    state: present

- name: create a directory for storing json files of dashboards
  file:
    path: "{{ grafana_dashboard_json_path }}"
    owner: "grafana"
    group: "grafana"
    state: directory
    recurse: true

- name: check if {{ grafana_dashboard_json_path }} is already provisioned
  stat:
    path: "{{ grafana_dashboard_json_path }}/{{ grafana_dashboard_archive_base }}"
  register: grafana_dashboard_provision_status

- name: deploy grafana dashboard json package
  unarchive:
    src: "{{ grafana_dashboard_archive }}"
    dest: "{{ grafana_dashboard_json_path }}"
    owner: "grafana"
    group: "grafana"
    copy: no
    validate_certs: no
  register: deploy_package
  when: grafana_dashboard_provision_status.stat.exists == false

- name: Copy python script
  template: src=modify_grafana_dashboard_json.py.j2 dest=/tmp/modify_grafana_dashboard_json.py mode="0644"
  when: deploy_package.changed == true

- name: Run python script to create json file with given configuration
  command: python /tmp/modify_grafana_dashboard_json.py
  when: deploy_package.changed == true

- name: Remove python script
  file:
    state: absent
    path: /tmp/modify_grafana_dashboard_json.py
  when: deploy_package.changed == true

- name: Get the count of OVN Service Instances from Inventory
  set_fact:
    mediator_healthy_instances: "{{ groups['ovn_mediator_servers'] | length - 1 }}"
    switch_healthy_instances: "{{ groups['ovn_switch_servers'] | length -1 }}"
    nomad_healthy_instances: "{{ groups['nomad_server'] | length -1 }}"
    riak_healthy_instances: "{{ groups['ovn_riak_servers'] | length -1 }}"
    zookeeper_healthy_instances: "{{ groups['zookeeper'] | length -1 }}"
    elastic_healthy_instances: "{{ groups['elasticsearch'] | length -1 }}"
    prometheus_healthy_instances: "{{ groups['prometheus_server'] | length -1 }}"
    kafka_healthy_instances: "{{ groups['kafka'] | length -1 }}"
    hadoop_datanode_healthy_instances: "{{ groups['hadoop_datanodes'] | length -1 }}"
    hadoop_namenode_healthy_instances: "{{ groups['hadoop_namenodes'] | length -1 }}"

- name: Copy python script to update OVN services threshold as per Ansible Inventory
  template: src=modify_grafana_dashboard_ovn_services_thresholds_json.py.j2 dest=/tmp/modify_grafana_dashboard_ovn_services_thresholds_json.py mode="0644"

- name: Run python script to update OVN services threshold as per Ansible Inventory
  command: python /tmp/modify_grafana_dashboard_ovn_services_thresholds_json.py
  register: python_execution_status

- debug:
    msg: "Result of Threshold Modification {{ python_execution_status.stdout_lines }}"

- name: Remove python script
  file:
    state: absent
    path: /tmp/modify_grafana_dashboard_ovn_services_thresholds_json.py

- name: looping over json files
  find:
    paths: "{{grafana_dashboard_json_path}}/{{grafana_dashboard_archive_base}}"
    patterns: '*.json'
  register: file_path

- name: deploy grafana dashboard using curl with auth proxy
  command: curl -sS -H 'X-WEBAUTH-USER:{{ grafana_admin_user }}' --noproxy 127.0.0.1 -XPOST -i 'http://127.0.0.1:{{grafana_port}}/api/dashboards/db' --data-binary @{{ item.path }}  -H "Content-Type:application/json"
  register: deploy_dashboard
  changed_when: "'200 OK' in deploy_dashboard.stdout"
  with_items: "{{file_path.files}}"
  when: grafana_auth_proxy_enabled == "true"

- name: deploy grafana dashboard using curl without auth proxy
  command: curl -sS --noproxy 127.0.0.1 -i -XPOST 'http://{{ grafana_admin_user }}:{{ grafana_admin_pass }}@127.0.0.1:{{grafana_port}}/api/dashboards/db' --data-binary @{{ item.path }}  -H "Content-Type:application/json"
  register: create_datasource_without_auth_proxy
  changed_when: "'200 OK' in create_datasource_without_auth_proxy.stdout "
  with_items: "{{file_path.files}}"
  when: grafana_auth_proxy_enabled == "false"
