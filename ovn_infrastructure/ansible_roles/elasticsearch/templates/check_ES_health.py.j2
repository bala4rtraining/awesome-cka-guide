#jinja2:lstrip_blocks: True
# Date: 6th Sept, 2018
# This file is deployed as python script (check_ES_health.py) in elasticsearch load balancer node.
# A periodic cron job executes this script every hour

import subprocess
import re
import datetime
import time
import commands
import syslog
import sys


def main():
  try:
    elasticsearch_metrics=commands.getoutput('curl localhost:9108/metrics')
    jvm_max_memory = re.findall('.*elasticsearch_jvm_memory_max_bytes.*', elasticsearch_metrics)
    jvm_max_memory_bytes = re.split('} ',jvm_max_memory[-1])
    if jvm_max_memory_bytes<0:
       syslog.syslog("JVM metrics returned negative integer")
       sys.exit(0)
    jvm_used_memory = re.findall('.*elasticsearch_jvm_memory_used_bytes.*area="heap".*', elasticsearch_metrics)
    jvm_used_memory_bytes = re.split('} ',jvm_used_memory[-1])
    jvm_usage_percentage = (float(jvm_used_memory_bytes[-1])/float(jvm_max_memory_bytes[-1]))*100
    if jvm_usage_percentage>{{ elasticsearch_jvm_heap_usage_max_size }}:
       cmd = '''curl -XPOST "https://{{ hostvars[inventory_hostname]['ansible_nodename'] }}:9200/elasticsearchlog-'''+datetime.date.today().strftime("%Y.%m.%d")+'''/message/" -H 'Content-Type: application/json' -d'
                  {
                               "Timestamp": "'''+datetime.datetime.now().isoformat()+'''",
                               "Type": "elasticsearch.log",
                               "Severity": 4,
                               "Payload": "JVM heap usage is '''+str(jvm_usage_percentage)+'''.Restarting Elasticsearch LB node.",
                               "EnvVersion": "",
                               "Pid": 0,
                               "Hostname": "{{ hostvars[inventory_hostname]['ansible_nodename'] }}",
                               "logTimestamp": "'''+datetime.datetime.now().isoformat()+'''"
                  }' --cert /etc/elasticsearch/elasticsearch_client_cert.pem --cacert /etc/elasticsearch/elasticsearch_client_ca_cert.pem --key /etc/elasticsearch/elasticsearch_client_key.pem'''
       output = commands.getoutput(cmd)
       #Get the process ID before Restart
       output = commands.getoutput('systemctl status elasticsearch')
       process = re.findall('.*Main PID:.*',output)
       process = re.split('\(',process[-1])
       processIDBeforeRestart = re.split(':',process[0])
       subprocess.call('systemctl restart elasticsearch',shell=True)
       #Get the process ID after Restart
       output = commands.getoutput('systemctl status elasticsearch')
       process = re.findall('.*Main PID:.*',output)
       process = re.split('\(',process[-1])
       processIDAfterRestart = re.split(':',process[0])
       killProcess = 'kill -9'+(processIDAfterRestart[-1])
       #If both the processIds are same the restart failed, kill the process and start it
       if processIDBeforeRestart[-1]==processIDAfterRestart[-1]:
          commands.getoutput(killProcess)
          subprocess.call('systemctl start elasticsearch',shell=True)
          time.sleep(5)
          output = commands.getoutput('systemctl status elasticsearch')
          syslog.syslog(output)
  except Exception as e:
    syslog.syslog("Killed and restarted Elasticsearch service")

if __name__== "__main__":
  main()


