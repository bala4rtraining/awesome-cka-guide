---
# tasks file for elasticsearch
# - name: include overrides specific to the distribution+version (e.g. Centos7)
#   include_vars: "{{ ansible_distribution }}{{ ansible_distribution_major_version }}.yml"

- name: uninstall java 7 openjdk
  yum: name=java-1.7.0-openjdk state=absent

- name: uninstall openjdk if it installed
  yum:
    name: java-1.8.0-openjdk
    state: absent

- name: Install Jre "{{ jre_name }}"
  yum:
    name: "{{ jre_name }}"
    state: present

- name: select the Jre using alternatives
  alternatives:
    name: java
    path: /usr/java/{{ jre_version }}/bin/java

- name: check if this is initial install of elasticsearch
  command: ls /etc/elasticsearch/elasticsearch.yml
  register: result
  ignore_errors: True

- name: Disable shard allocation
  command: 'curl -Xput -H "Content-Type:application/json" --data-ascii "{ "transient": {  "cluster.routing.allocation.enable" : "none"} }"  http://{{inventory_hostname}}:{{ elasticsearch_port }}/_cluster/settings'
  when: rolling_upgrade

- name: Stop elasticsearch service
  service: name=elasticsearch state=stopped
  when: result|succeeded

- name: backup|create archive directory if requested
  file: path=/opt/app/backup/ state=directory
  when: backup_elasticsearch_data

- name: backup|create archive if requested
  command: tar -czf "{{ elasticsearch_archive }}" "{{ elasticsearch_datadir }}/elasticsearch/"
#  archive:
#    path: "{{ elasticsearch_datadir }}/elasticsearch/"
#    dest: "{{ elasticsearch_archive }}"
#    format: gz
  when: backup_elasticsearch_data

- name: uninstall OLD version rpm
  yum: name=elasticsearch-2.0.0-1 state=absent

- name: uninstall elasticsearch version "{{ elasticsearch_oldversion }}"
  yum: name=elasticsearch-{{ elasticsearch_oldversion }} state=absent

- name: install rpms
  yum: name={{download_path_url}}/{{item}}.rpm state=present validate_certs=no
  with_items: "{{elasticsearch_rpms}}"

- name: update the service file (e.g. add local patches on top of the RPM installed one)
  template: src={{item.src}} dest={{item.dest}} mode={{item.mode}}
  with_items: "{{service_templates}}"

- name: reload systemd daemon as necessary
  command: systemctl daemon-reload
  when: systemd_daemon_reload

- name: ensure data directory exists and is writable
  file: path={{ elasticsearch_datadir }} owner=elasticsearch group=elasticsearch state=directory recurse=yes

- name: apply jvm options (service config)
  template: src=jvm.options.j2 dest=/etc/elasticsearch/jvm.options
- name: apply elasticsearch config templates
  template: src=elasticsearch.yml.j2 dest=/etc/elasticsearch/elasticsearch.yml

- name: set vm.max_map_count higher than the 65530 linux default
  command: sysctl -w vm.max_map_count=262144

- name: Bounce/start elasticsearch service
  service: name=elasticsearch state=restarted enabled=yes

- name: Wait for elasticsearch node to come back up
  wait_for: port={{ elasticsearch_port }} delay=35 host={{ inventory_hostname }}
  when: rolling_upgrade

- name: Wait for cluster health to return to green
  uri: url=http://{{ inventory_hostname }}:{{ elasticsearch_port }}/_cluster/health method=GET
  register: response
  until: "response.json.status == 'green'"
  retries: 10 
  delay: 30
  when: rolling_upgrade
   
- name: enable shard allocation
  command: 'curl -Xput -H "Content-Type:application/json" --data-ascii "{ "transient": {  "cluster.routing.allocation.enable" : "all"} }"  http://{{ inventory_hostname }}:{{ elasticsearch_port }}/_cluster/settings'
  when: rolling_upgrade
