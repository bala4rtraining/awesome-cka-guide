#Setup the switch time zone (Note this will always report changed if re-run after the dpkg-reconfigure)

- name: SSHD reverse DNS configuration
  blockinfile:
    dest: "/etc/ssh/sshd_config"
    marker: "##{mark} -- RDNS Ansible -- ##"
    content: "UseDNS no"
  when: global.SSH.RDNS is defined and global.SSH.RDNS == "disable" and ansible_lsb.major_release == "3"
  notify: restart SSH
  tags:
    - ssh_setup
    - initial_setup


- name: Enable en_US.UTF-8 Locale
  lineinfile: dest=/etc/locale.gen line="en_US.UTF-8 UTF-8" regexp=^.*en_US.UTF-8
  notify:
    - generate locale
  tags:
    - locale_setup

- name: Set time zone /etc/timezone
  copy: content={{global.ntp.timezone}} dest=/etc/timezone
  when: global.ntp.timezone is defined
  notify:
    - update timezone
  tags:
    - time_setup
    - ntp_setup
    - initial_setup

- name: Set hostname to {{ansible_hostnme}} if not already set
  hostname:
    name: "{{ansible_hostname}}"
  tags:
    - initial_setup

- name: Setup NTP
  template: src=ntp.j2 dest=/etc/ntp.conf
  when: global.ntp is defined
  notify:
    - restart NTP
    - Verify NTP
  tags:
    - time_setup
    - ntp_setup
    - initial_setup

- name: create config folder locally
  file: path=config/{{ ansible_hostname }} state=directory recurse=yes
  delegate_to: localhost
  become: no
  tags:
    - interface_setup
    - local
  when: global.save_local is defined and global.save_local == "enable"

- name: create rendered flat-file /etc/ntp.conf locally
  template: src=ntp.j2  dest=config/{{ ansible_hostname }}/ntp.conf
  delegate_to: localhost
  become: no
  tags:
    - local
    - ntp_setup
  when: global.save_local is defined and global.save_local == "enable"

#This overrides the http proxy in the 90apt-proxy
- name: Setup APT proxy
  copy: content='Acquire::http::Proxy "{{global.apt_proxy}}";\n' dest='/etc/apt/apt.conf.d/90apt-proxy'
  when: global.apt_proxy is defined
  tags:
    - apt_proxy_setup
    - initial_setup


#Copy the topology file to the remote switches
- name: Configure ptmd from remote URL
  get_url: url={{global.ptm_topology}} dest=/etc/ptm.d/topology.dot
  when: global.ptm_topology is defined
  notify:
    - restart PTM
    - Check PTM status
    - Print PTM table
  tags:
    - ptm_setup
    - initial_setup

#Check if roles/cumulus_common/files/topology.dot file is actually defined
- name: Check if local PTM dot file is created
  local_action: stat path="topology.dot"
  register: ptmresult
  tags:
    - ptm_setup

- debug: var=ptmresult
  tags:
    - ptm_setup

- name: Configure ptmd from local topology.dot
  copy: src=topology.dot dest=/etc/ptm.d/topology.dot
  when: (global.ptm_topology is not defined) and (ptmresult["stat"].exists)
  notify:
    - restart PTM
    - Check PTM status
    - Print PTM table
  tags:
    - ptm_setup
    - initial_setup


#Retrieve the updated package list
#You can use update_cache=yes on each package install or this single task
- apt: update_cache=yes cache_valid_time=3600
  when: global.additional_packages.cumulus_repo is defined
  tags:
    - apt_setup
    - initial_setup


#Export all logs to remote syslog server
- name: Setup remote syslog server
  copy:
    content='action(type="omfwd" Target="{{global.remote_syslog_server}}" Device="mgmt" Port="514" Protocol="udp")\n'
    dest="/etc/rsyslog.d/11-remotesyslog.conf"
  when: global.remote_syslog_server is defined
  notify: restart rsyslog
  tags:
    - syslog_setup
    - initial_setup
