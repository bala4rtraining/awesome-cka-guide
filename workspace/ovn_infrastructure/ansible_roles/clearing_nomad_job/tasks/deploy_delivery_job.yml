---
#==============================================================================#
#
# Deprecation warning: This file has been moved to new repository. Do not modify this copy.
#
# Please see: https://stash.trusted.visa.com:7990/projects/OP/repos/ovn_app_infrastructure/browse
#
#==============================================================================#

# Check ovn_clearing_user("was") exists or not
- name: Check ovn_clearing_user("was") exists or not
  command: 'id -u {{ ovn_clearing_user }}'
  ignore_errors: yes
  register: user_check

# Check ovn_clearing_group ("was") exists or not
- name: Check ovn_clearing_group ("was") exists or not
  command: 'id -g {{ ovn_clearing_group }}'
  ignore_errors: yes
  register: group_check

# create  ovn_clearing_user("was") if it does not exist group
- name: create hdfs group with gid= "{{ hdfs_grp_id }}" used for hdfs group in Global Enterprise
  group:
    name: "{{ ovn_clearing_group }}"
    gid: "{{ ovn_clearing_group_id }}"
    state: present
    system: yes
  when: group_check | failed

# create clearing job user
- name: create clearing job user with uid= "{{ ovn_clearing_user_id }}" used for {{ ovn_clearing_user }} in Global Enterprise
  user:
    name: "{{ ovn_clearing_user }}" 
    comment: "User for ovn_clearing"
    group: "{{ ovn_clearing_group }}" 
    uid: "{{ ovn_clearing_user_id }}"
    system: yes
    home: "{{ovn_clearing_home_dir}}"
    shell: /usr//bin/ksh
    state: present
  when: user_check | failed
  
- name: create hadoop temp dir
  file:
    dest: "{{ hadoop_tmp_dir }}"
    state: directory
    owner: "{{ ovn_clearing_user }}"
    group: "{{ ovn_clearing_group }}"
    mode: "0755"
    recurse: no

- name: create the folders on server when folder path not found 
  file :
    dest: "{{rpm_folder}}"
    state: directory
    owner: "{{ ovn_clearing_user }}"
    group: "{{ ovn_clearing_group }}"
    mode:  0755
    recurse: no

- name: create the folders to untar on server when folder path not found 
  file :
    dest: "{{ovn_clearing_install_dir}}"
    state: directory
    owner: "{{ ovn_clearing_user }}"
    group: "{{ ovn_clearing_group }}"
    mode:  0755
    recurse: no

- name: create configuration folder ovn_clearing_job when folder path not found 
  file :
    dest: "{{config_folder}}"
    state: directory
    owner: "{{ ovn_clearing_user }}"
    group: "{{ ovn_clearing_group }}"
    mode: 0755
    recurse: no

- name: create the log folder when folder path not found
  file :
    path: "{{ ovn_clearing_log_dir }}"
    owner: "{{ ovn_clearing_user }}"
    group: "{{ ovn_clearing_group }}"
    state: directory
    mode:  0755
    recurse: yes

- name: verify rpm existance at the path 
  stat:
    path: "{{ full_rpm_path }}"
  register: st

- name: download the rpm from artifact url location with rw permissions
  get_url:
    url: "{{artifact_url}}"
    dest: "{{full_rpm_path}}"
    mode: 0644
  when: not st.stat.exists

- name: re-verify rpm existance at the path to check if we have downloaded
  stat:
    path: "{{ full_rpm_path }}"
  register: st

- name: untar the tar file to destination to run on nomad clients
  unarchive:
    src: "{{ full_rpm_path }}"
    dest: "{{ovn_clearing_install_dir}}"
    owner: "{{ ovn_clearing_user }}"
    group: "{{ ovn_clearing_group }}"
    copy: no     
  when: st.stat.exists

- name: embed delivery job template with details  
  template: 
    src: delivery.hcl.j2
    dest: "{{ovn_clearing_install_dir}}/ovn_clearing_jobs/delivery.hcl"
    owner: "{{ ovn_clearing_user }}"
    group: "{{ ovn_clearing_group }}"

#####
- name: Pull crypto library from artifactory
  get_url:
    url: "{{ release_artifactory_url }}/{{ cryptolib_filename }}-{{ cryptolib_version }}.jar"
    dest: "{{ ansible_env.HOME }}"

- name: Encrypt ssl keystore password
  command: bash -c "java -jar {{ ansible_env.HOME }}/{{ cryptolib_filename }}-{{ cryptolib_version }}.jar encrypt '{{ ssl_keyStorePwd_vault }}'"
  register: encryptedsslkeystore
  
- name: Encrypt ssl truststore password
  command: bash -c "java -jar {{ ansible_env.HOME }}/{{ cryptolib_filename }}-{{ cryptolib_version }}.jar encrypt '{{ ssl_trustStorePwd_vault }}'"
  register: encryptedssltruststore
  
- name: Encrypt bridge ftp password
  command: bash -c "java -jar {{ ansible_env.HOME }}/{{ cryptolib_filename }}-{{ cryptolib_version }}.jar encrypt '{{ bridge_ftp_password_vault }}'"
  register: encryptedbridgeftp

- set_fact:
    ssl_keyStorePwd: "{{ encryptedsslkeystore.stdout }}"
    ssl_trustStorePwd: "{{ encryptedssltruststore.stdout }}"
    bridge_ftp_password: "{{ encryptedbridgeftp.stdout }}"
    
#####
- name: embed application.conf.j2 template with details  
  template: 
    src: application.conf.j2
    dest: "{{rpm_resources_folder}}/application.conf"
    owner: "{{ ovn_clearing_user }}"
    group: "{{ ovn_clearing_group }}"
  when: st.stat.exists

- name: embed core-site.xml.j2 template with details 
  template: 
    src: core-site.xml.j2
    dest: "{{rpm_resources_folder}}/core-site.xml"
    owner: "{{ ovn_clearing_user }}"
    group: "{{ ovn_clearing_group }}"
  when: st.stat.exists

- name: embed hdfs-site.xml.j2 template with details
  template: 
    src: hdfs-site.xml.j2
    dest: "{{rpm_resources_folder}}/hdfs-site.xml"
    owner: "{{ ovn_clearing_user }}"
    group: "{{ ovn_clearing_group }}"
  when: st.stat.exists

- name: embed ssl-client.xml.j2 template with details
  template: 
    src: ssl-client.xml.j2
    dest: "{{rpm_resources_folder}}/ssl-client.xml"
    owner: "{{ ovn_clearing_user }}"
    group: "{{ ovn_clearing_group }}"
  when: st.stat.exists and hadoop_enable_tls

- name: embed ssl-server.xml.j2 template with details
  template: 
    src: ssl-server.xml.j2
    dest: "{{rpm_resources_folder}}/ssl-server.xml"
    owner: "{{ ovn_clearing_user }}"
    group: "{{ ovn_clearing_group }}"
  when: st.stat.exists and hadoop_enable_tls

- name: embed logback.xml.j2 template with details
  template: 
    src: logback.xml.j2
    dest: "{{rpm_resources_folder}}/logback.xml"
    owner: "{{ ovn_clearing_user }}"
    group: "{{ ovn_clearing_group }}"
  when: st.stat.exists
