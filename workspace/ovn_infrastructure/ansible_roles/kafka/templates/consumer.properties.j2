# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see kafka.consumer.ConsumerConfig for more details

{% if enable_kafka_mirror_maker_ssl == true %}

bootstrap.servers={{remote_kafka_members|default([])}}

{% else %} 

# timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=6000
{% if kafka_enable_zk_client_authentication == "true" %}
zookeeper.connect={{remote_zookeeper_members_nodenames|default([])}}
{% else %}
zookeeper.connect={{remote_zookeeper_members|default([])}}
{% endif %}

{% endif %}

#consumer group id
group.id={{mirror_maker_consumer_group_id}}

#consumer timeout
#consumer.timeout.ms=5000

#if the consumer's offset is bad, start from the beginning (writes must be idempotent)
{% if enable_kafka_mirror_maker_ssl == false %}
auto.offset.reset=smallest
{% else %}
auto.offset.reset=earliest
{% endif %}

#do not asynchronously commit offsets
auto.commit.enabled=false

{% if enable_kafka_mirror_maker_ssl == true %}
#settings for kafka consumer offset storage
offsets.storage=kafka
dual.commit.enabled=false
{% else %}
#settings for kafka consumer offset storage
offsets.storage=kafka
dual.commit.enabled=true
{% endif %}

{% if enable_kafka_mirror_maker_ssl == true %}
############# SSL Settings #############
security.protocol=SSL
ssl.keystore.location={{ kafka_mirror_maker_server_keystore_location }}.jks
ssl.keystore.password={{ kafka_server_truststore_password }}
ssl.key.password={{ kafka_server_truststore_password }}
ssl.truststore.location={{ kafka_mirror_maker_server_truststore_location }}.jks
ssl.truststore.password={{ kafka_server_truststore_password }}
{% endif %}

############ timeout settings ###################
session.timeout.ms=180000
request.timeout.ms=190000
