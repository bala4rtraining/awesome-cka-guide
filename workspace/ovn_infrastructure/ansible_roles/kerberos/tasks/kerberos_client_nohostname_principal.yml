---
# Install kerberos client packages
- name: Install the kerberos packages 
  yum: 
    name: "{{ item }}" 
    state: present
  with_items: "{{ kerberos_client_packages }}"

# Create client config file
- name: Copy the client configuration file 
  template:
    src: krb5.conf.j2 
    dest: /etc/krb5.conf

# Create keytabs directory
- name: Create keytabs directory
  file:
    path: "{{ kerberos_keytabs_dir }}"
    state: directory
    owner: "root"
    group: "root"
    mode: "0755"

# Destroy existing cache for creating principals
- name: Destroy kerberos cache, if present
  shell: kdestroy

# Check whether keytabs exist
- name: Check whether keytab file exists
  stat:
    path: "{{ kerberos_keytabs_dir }}/{{ item }}.keytab"
  register: keytab_exists
  with_items: "{{ kerberos_principal_names }}"

# Create principals, if don't exist
- name: Create principals
  shell:
    cmd: |
      kadmin  -q "addprinc -randkey {{ item.item }}" <<EOF
      {{ kerberos_kadmin_pass }}
      EOF
  when: item.stat.exists == False and kerberos_skip_create_principals == "false"
  with_items: "{{ keytab_exists.results }}"


# Create missing keytabs
- name: Create keytab files for principals
  shell:
    cmd: |
      kadmin  -q "xst -k {{ kerberos_keytabs_dir }}/{{ item.item }}.keytab {{ item.item }}" <<EOF
      {{ kerberos_kadmin_pass }}
      EOF
  when: item.stat.exists == False and kerberos_skip_create_keytabs == "false"
  with_items: "{{ keytab_exists.results }}"

# Change ownership and mode of keytab file
- name: Restrict access to keytab files
  file:
    path: "{{ kerberos_keytabs_dir }}/{{ item }}.keytab"
    mode: 0400
    owner: "{{ kerberos_keytab_owner }}"
    group: "{{ kerberos_keytab_group }}"
  with_items: "{{ kerberos_principal_names }}"

# Check whether merged keytab file presents or not
- name: Check whether merged keytab file exists
  stat:
    path: "{{ kerberos_keytabs_dir }}/{{ kerberos_merged_keytab }}.keytab"
  register: merged_keytab_exists
  when: kerberos_merged_keytab != ""

# Merge keytabs into one file
- name: Merge keytabs files into one keytab
  shell:
    cmd: |
      ktutil <<EOF
      {% for item in kerberos_principal_names %}
      read_kt {{ kerberos_keytabs_dir }}/{{ item }}.keytab
      {% endfor %}
      write_kt {{ kerberos_keytabs_dir }}/{{ kerberos_merged_keytab }}.keytab
      EOF
  when: kerberos_merged_keytab != "" and merged_keytab_exists.stat.exists == False
  with_items: "{{ kerberos_principal_names }}"

# Change ownership and mode of merged keytab file
- name: Restrict access to merged keytab file
  file:
    path: "{{ kerberos_keytabs_dir }}/{{ kerberos_merged_keytab }}.keytab"
    mode: 0400
    owner: "{{ kerberos_keytab_owner }}"
    group: "{{ kerberos_keytab_group }}"
  when: kerberos_merged_keytab != ""