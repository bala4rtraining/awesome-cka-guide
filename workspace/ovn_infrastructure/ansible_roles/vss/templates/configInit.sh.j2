#!/bin/bash

# Wait until appropriate Config and PARM files and flag are present from MVS1.
# Obtain Config and PARM from MVS1.
# Convert Config file using configconverter.exe.
# Move and copy Config and PARM respectively to files directory.
# Create configRunFlag.txt for configRun.sh.

# Logging File
DATEFILE="/opt/app/vss/vssexe/configInitLog_`date +%Y%m%d_%H%M%S`.txt"
DATEFILECHECK="/opt/app/vss/vssexe/configInitCheckLog_`date +%Y%m%d`.txt"
#echo "configInit.sh output log: $DATEFILE" &>> $DATEFILE
# Close STDOUT file descriptor
exec 1<&-
# Close STDERR FD
exec 2<&-
# Open STDOUT as $DATEFILE file for read and write.
exec 1<>$DATEFILECHECK
# Redirect STDERR to STDOUT
exec 2>&1

cd /opt/app/vss
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/app/vss/objects
TIME="`date +%H%M`"
DEADLINE=$(cat {{ vss_binaries_path }}/configdeadline.txt)
# Obtain config input for conversion. If unsuccessful, exit with return code 1.
#echo "Running fetchConfig.sh with parameters..." &>> $DATEFILE
if {{ vss_binaries_path }}/fetchConfig.sh -f {{ vss_ftps_hostname }} -p {{ vss_sftp_directory }} -u {{ vss_username }} -i /home/{{ vss_username }}/.ssh/vss -d {{ vss_local_input_dir }}; then
    echo "fetchConfig.sh SUCCESS." &>> $DATEFILE
else
        if (($TIME > $DEADLINE)); then
      echo "fetchConfig.sh FAIL! `date +%Y%m%d_%H%M%S`" &>> $DATEFILE
      # This is to tell NOMAD to stop as the task was successful because we need to stop from here!!!
          exit 0
        else
      echo "Config files are unavailable at `date +%Y%m%d_%H%M%S`" &>> $DATEFILECHECK
      # This is to tell NOMAD to check later as the task was failed.
          exit 1
        fi
fi

# Once config exists, invoke converter.
# If converter is successful, continue.
# Output SEQ file will be in same directory as converter.
echo "Config file present. Running configconverter.exe..." &>> $DATEFILE
`pwd`/vssexe/configconverter.exe `pwd`/input/zos.cfg
if [ "$?" = "0" ]; then
    echo "configconverter.exe SUCCESS." &>> $DATEFILE
else
        echo "configconverter.exe FAIL!" &>> $DATEFILE
        exit 0
fi

# Move to files directory.
echo "Moving CF.CNFG.SEQ to files directory..." &>> $DATEFILE
mv `pwd`/CF.CNFG.SEQ `pwd`/files/CF.CNFG.SEQ
if [ "$?" = "0" ]; then
    echo "Converted Config move SUCCESS." &>> $DATEFILE
else
        echo "Converted Config move FAIL!" &>> $DATEFILE
        exit 0
fi

# Once PARM_IN file exists, copy to files.
echo "Copying PARM to files directory..." &>> $DATEFILE
cp `pwd`/input/VS_PARM_IN.txt `pwd`/files/VS_PARM_IN.txt
if [ "$?" = "0" ]; then
    echo "PARM copy SUCCESS." &>> $DATEFILE
else
        echo "PARM copy FAIL!" &>> $DATEFILE
        exit 0
fi

# Create configRunFlag.txt for configRun.sh.
cd vssexe
echo "configInit.sh SUCCESS. Creating configRunFlag.txt for configRun.sh..." &>> $DATEFILE
touch /opt/app/vss/vssexe/configRunFlag.txt
if [ "$?" = "0" ]; then
    echo "configRunFlag.txt creation SUCCESS." &>> $DATEFILE
else
        echo "configRunFlag.txt creation FAIL!" &>> $DATEFILE
        exit 0
fi

# End of configInit.sh
echo "configInit.sh END." &>> $DATEFILE
exit 0