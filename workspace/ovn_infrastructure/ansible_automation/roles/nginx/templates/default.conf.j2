#######
#!!! Please DO NOT EDIT.  This configuration is maintained by Ansible !!!
#######

# some of the comments are taken from https://michael.lustfield.net/nginx/getting-a-perfect-ssl-labs-score

server {
    listen       443 default_server ssl http2;
    server_name  localhost;
    ssl_certificate    {{ nginx_home }}/cert/{{ nginx_cert }};
    ssl_certificate_key {{ nginx_home }}/cert/{{ nginx_key }};
    # gzip should not be used with ssl
    gzip off;
    # security stuff matches {{ nginx_ssl_port }} below
    ssl_dhparam {{ nginx_home }}/cert/{{ nginx_dhparam }};
    ssl_session_cache shared:SSL:60m;
    ssl_session_timeout 60m;
    ssl_protocols TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5:!SHA:!DH;
    ssl_prefer_server_ciphers on;
    ssl_stapling on;
    ssl_stapling_verify on;
    ssl_ecdh_curve secp384r1;
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    location / {
        root   {{ nginx_home }}/html;
    }
}

server {
    listen       {{ nginx_ssl_port }} default_server ssl http2;
    server_name  localhost;
    ssl_certificate    {{ nginx_home }}/cert/{{ nginx_cert }};
    ssl_certificate_key {{ nginx_home }}/cert/{{ nginx_key }};

    # gzip should not be used with ssl
    gzip off;

    # By default, Nginx will use the default DHE (Ephemeral Diffie-Hellman) paramaters provided by openssl.
    # This uses a weak key that gets lower scores. The best thing to do is build your own.
    # You can create a 2048 bit key.
    ssl_dhparam {{ nginx_home }}/cert/{{ nginx_dhparam }};

    # Maintaining SSL Sessions is definitely a good thing for everyone if you expect
    # the user to be on your website for more than a single page view.
    ssl_session_cache shared:SSL:60m;
    ssl_session_timeout 60m;

    # The best place to start with securing your website is protocol support.
    # It's a given that you shouldn't be using SSLv2. It should also be a given that
    # you should no longer be using SSLv3. The recent POODLE vulnerability pretty
    # much put the final knife in it.
    # This means you should only support the TLS protocols.
    #
    #    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    #
    # This is reasonably secure. However, we want a "perfect" score. This will give you a score of 95.
    # Disabling TLSv1.0 gives you a 97. Disabling TLSv1.1 gives you that last bit to 100.
    # So, if you want a perfect score, you'll use this.
    ssl_protocols TLSv1.2;

    # This one especially is ever changing. What's best today, may not be so hot tomorrow.
    # Here, you'll have a battle between high security and compatibility.
    # Keeping with the topic of this post, we care about security only
    #
    # ssl_ciphers AES256+EECDH:AES256+EDH:!aNULL;

    # set cipher for compatibility with stash
    ssl_ciphers HIGH:!aNULL:!MD5:!SHA:!DH;
    ssl_prefer_server_ciphers on;

    # SSL Stapling doesn't exactly make you any more secure, but it does help the client significantly.
    # In short, you help the client by telling them they can use your server for OCSP information
    # for your domain instead of letting the browser make the request to an often unreliable resource.
    ssl_stapling on;
    ssl_stapling_verify on;

    # It turns out, some openssl implementations don't provide a nice default for nginx to inherit,
    # so it becomes a good idea to specify this manually. (Thanks James from Penn State)
    ssl_ecdh_curve secp384r1;

    # We'll also want to add a few headers.
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    # for performance on blue ocean display
    proxy_buffers 32 8k;
    proxy_buffer_size 4k;

    # disable cacheing to disk on streaming responses
    proxy_max_temp_file_size 0;

    location /{{ jenkins_context_path }}/ {
        #proxy_set_header Host $host$server_port;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP       $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_redirect http:// https://;
        
        # apparently this fixes jenkins blue ocean url encoding
        # issue when navigating to blue ocean from inside the
        # jenkins folders.
        proxy_pass http://127.0.0.1:{{ jenkins_port }};
    }

    location /{{ prometheus_context_path }}/ {
        #proxy_set_header Host $host$server_port;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP       $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_redirect http:// https://;
        proxy_pass http://127.0.0.1:{{ prometheus_port }}/{{ prometheus_context_path }}/;

        sub_filter_once off;
        sub_filter '="/' '="/{{ prometheus_context_path }}/';
        sub_filter '="/static/' '="/static/{{ prometheus_context_path }}/';
        sub_filter 'var PATH_PREFIX = "";' 'var PATH_PREFIX = "/{{ prometheus_context_path }}";';
    }

    location /{{ grafana_context_path }}/ {
        #proxy_set_header Host $host$server_port;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP       $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_redirect http:// https://;
        proxy_pass http://127.0.0.1:{{ grafana_port }}/;
    }

    location / {
        #proxy_set_header Host $host$server_port;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP       $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_redirect http:// https://;
        proxy_pass http://127.0.0.1:{{ ovndoc_port }}/;
    }

}
