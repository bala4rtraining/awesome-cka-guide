---
#Stop the service first
#stop the service if it exists
- name: get the service status
  shell: service {{yummirrors_name}} status warn=false
  register: _service_status
  failed_when: _service_status.rc != 0 and ("unrecognized service" not in _service_status.stderr)
  ignore_errors: true

- name: stop the service if it exists and is running
  service: name={{yummirrors_name}} state=stopped
  when: _service_status.rc == 0
  
# Create install directory
- name: create yummirrors install directory
  file:
    path: "{{ yummirrors_install_dir }}"
    state: directory
    recurse: no
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: "0755"

# Download and unarchive tarball
- name: unarchive yummirrors tarball
  unarchive:
    src: "{{ yummirrors_artifact_url }}"
    dest: "{{ yummirrors_install_dir }}"
    copy: no
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    validate_certs: False

# Creates log directory
- name: create yummirrors log directory
  file:
    path: "{{ yummirrors_log_dir }}"
    state: directory
    recurse: no
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: "0755"

# Copy configuration file
- name: copy yummirrors config file
  template:
    src: "{{ yummirrors_config_template }}"
    dest: "{{ yummirrors_install_dir }}/{{ yummirrors_config }}"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: "0644"

# Copy Service file
- name: yummirrors systemd configuration
  template:
    src: "{{ yummirrors_service_template }}"
    dest: "/etc/systemd/system/{{ yummirrors_service }}"
    owner: "{{ nginx_user }}"
    group: "{{ nginx_group }}"
    mode: "0644"
    
# Reload systemd configuration
- name: reload systemd configuration
  command: systemctl daemon-reload

# Start the server
- name: start yummirrors server
  service: name={{ yummirrors_name }} enabled=yes state=started