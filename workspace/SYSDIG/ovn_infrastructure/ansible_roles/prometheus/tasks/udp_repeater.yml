---
- name: create Prometheus group
  group: name={{ prometheus_group }}  state=present

- name: create Prometheus user
  user:
    name: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    createhome: no
    comment: "Prometheus User"
    state: present

- name: create udp_repeater install directory {{ exporter_install_dir }}
  file:
    dest: "{{ exporter_install_dir }}"
    state: directory
    recurse: yes
    mode: "0750"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"

- name: check if {{ udp_repeater_archive_base }} is already provisioned
  stat:
    path: "{{ exporter_install_dir }}/{{ udp_repeater_archive_base }}"
  register: udp_repeater_provision_status

- name: deploy udp_repeater package
  unarchive:
    src: "{{ udp_repeater_archive }}"
    dest: "{{ exporter_install_dir }}"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    copy: no
    validate_certs: no
  when: udp_repeater_provision_status.stat.exists == false

- name: link to udp_repeater directory {{ udp_repeater_base_dir }}
  file:
    src: "{{ udp_repeater_archive_base }}"
    dest: "{{ udp_repeater_base_dir }}"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    force: yes
    state: link

- name: deploy udp_repeater service
  template:
    src: "udp_repeater.service.j2"
    dest: "/etc/systemd/system/udp_repeater.service"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: "0644"
  register: udp_repeater_service_result

- name: reload system service configs.
  shell: systemctl daemon-reload
  when: udp_repeater_service_result.changed == true 

- name: enable and start udp_repeater package.
  service:
    name: udp_repeater
    state: restarted
  when: udp_repeater_service_result.changed == true
  register: udp_repeater_service_restart

- name: ensure udp_repeater is started and enabled to start at boot.
  service:
    name: udp_repeater
    state: started
    enabled: yes
  register: udp_repeater_service_start

- name: enable and start heka
  service:
    name: heka
    state: restarted
  when: udp_repeater_service_start.changed == true or udp_repeater_service_restart.changed == true
