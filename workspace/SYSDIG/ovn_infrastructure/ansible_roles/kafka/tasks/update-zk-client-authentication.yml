---
- name: check if jre1.8-1.8.0_152 is installed
  shell: rpm -qa | grep jre1.8-1.8.0_152
  register: result
  ignore_errors: true
  no_log: true

- name: ensure java is set to unlimited crypto policy
  include_role:
    name: java
    tasks_from: enable-crypto
  when: result.rc == 0 and jre_version == "jre1.8.0_152"

- name: clean the key tabs 
  file: 
    path: "{{ kafka_keytab }}"
    state: absent
  when: kafka_enable_zk_client_authentication == "true" 
  ignore_errors: true  

- name: Create kerberos principal & keytabs on {{ inventory_hostname }}
  include_role:
    name: kerberos
    tasks_from: kerberos_client_nohostname_principal
  vars:
    kerberos_principal_names: ["{{ kafka_principal_name }}"]
    kerberos_merged_keytab: "{{ kafka_principal_name }}"
    kerberos_keytab_owner: "{{ kafka_username }}"
    kerberos_keytab_group: "{{ kafka_group }}"
  when: kafka_enable_zk_client_authentication == "true" and inventory_hostname == groups["kafka"][0]


- name: copy the file to local from {{ inventory_hostname }}
  fetch:
    src: "{{ kafka_keytab }}"
    dest: "/tmp/temp.keytab"
    flat: yes
  when: inventory_hostname == groups["kafka"][0] and  kafka_enable_zk_client_authentication == "true"

# Create keytabs directory
- name: Create keytabs directory
  file:
    path: "{{ kerberos_keytabs_dir }}"
    state: directory
    owner: "root"
    group: "root"
    mode: "0755"
  when: inventory_hostname != groups["kafka"][0] and  kafka_enable_zk_client_authentication == "true"

- name: copy key tabs to the rest of the hosts
  copy:
    src: "/tmp/temp.keytab"
    dest: "{{ kafka_keytab }}"
  when: inventory_hostname != groups["kafka"][0] and kafka_enable_zk_client_authentication == "true"

- name: change permissions ..etc of keytabs
  include_role:
    name: kerberos
    tasks_from: kerberos_client_nohostname_principal
  vars:
    kerberos_principal_names: ["{{ kafka_principal_name }}"]
    kerberos_merged_keytab: "{{ kafka_principal_name }}"
    kerberos_keytab_owner: "{{ kafka_username }}"
    kerberos_keytab_group: "{{ kafka_group }}"
    kerberos_skip_create_principals: "true"
    kerberos_skip_create_keytabs: "true"
  when: kafka_enable_zk_client_authentication == "true" and inventory_hostname != groups["kafka"][0]

- name: broker configurations
  template: >
    src={{ item }}.j2
    dest={{ kafka_install_dir }}/config/{{ item }}
    owner={{ kafka_username }}
    group={{ kafka_group }}
    mode=0640
  with_items:
    - server.properties
    - jaas.conf

- name: broker producer properties (for data center replication)
  template: >
    src=producer.properties.j2
    dest={{ kafka_install_dir }}/config/producer.properties
    owner={{ kafka_username }}
    group={{ kafka_group }}
    mode=0640
  when: remote_instance is defined

- name: broker consumer properties (for data center replication)
  template: >
    src=consumer.properties.j2
    dest={{ kafka_install_dir }}/config/consumer.properties
    owner={{ kafka_username }}
    group={{ kafka_group }}
    mode=0640
  when: remote_instance is defined

- name: kafka systemd configuration
  template: >
    src=kafka.service.j2
    dest=/etc/systemd/system/kafka.service
    owner={{ kafka_username }}
    group={{ kafka_group }}
    mode=0644

- name: kafka mirror maker configuration
  template: >
    src=kafka_mirror_maker.service.j2
    dest=/etc/systemd/system/kafka_mirror_maker.service
    owner={{ kafka_username }}
    group={{ kafka_group }}
    mode=0644
  when: remote_instance is defined

- name: reload kafka service configuration
  command: systemctl daemon-reload

- name: set the default jvm settings
  lineinfile:
    path: "{{ kafka_install_dir }}/bin/kafka-run-class.sh"
    regexp: '^KAFKA_OPTS='
    insertbefore: '^# Generic jvm settings you want to add'
    line: |
      KAFKA_OPTS="
      {%- if kafka_enable_zk_client_authentication == "true" -%}
      -Djava.security.auth.login.config={{ kafka_install_dir }}/config/jaas.conf $KAFKA_OPTS
      {%- else -%}
      $KAFKA_OPTS
      {%- endif -%}
      "
