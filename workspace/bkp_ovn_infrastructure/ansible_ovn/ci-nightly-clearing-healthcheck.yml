---
#ci-nightly-clearing-healthcheck is helpful to run tests on the servers to verify clearing services are working correclty.
#This playbook helps us to verify/validate the following.
#clearing services are up and running in appropriate servers
#TCP ports are open for hdfs, nomad and kafka components 
#Filesystem is within limits (< 80%) on all servers in cluster
#Dual center connectivity is active
- include: ../ovn_vars.yml ovn_vars_hosts=all

#==============================================================================#
#
# Deprecation warning: This file has been moved to new repository. Do not modify this copy.
#
# Please see: https://stash.trusted.visa.com:7990/projects/OP/repos/ovn_app_infrastructure/browse
#
#==============================================================================#

- name: Fail when allow_ovninfra_playbook is not defined
  hosts: localhost
  gather_facts: no
  tasks:
    - debug:
        var: ALLOW_OVNINFRA_PLAYBOOK
    - debug:
        msg: "ALLOW_OVNINFRA_PLAYBOOK variable is required"
      failed_when: "'true' not in ALLOW_OVNINFRA_PLAYBOOK"

- hosts: all
  gather_facts: no
  tasks:
    - debug:
        msg: "This file has been deprecated and moved to ovn_app_infrastructure repository"
      run_once: true

- name: ci-nightly
  hosts: all
  gather_facts: yes
  any_errors_fatal: True
  tasks:
      #checking if the services are up or not
    - name: check the status of service kafka 
      shell: systemctl status kafka
      register: service_status_test
      when: inventory_hostname in groups['kafka']
      failed_when: "'running' not in service_status_test.stdout"
      
    - name: check the status of service riak 
      shell: systemctl status riak
      register: service_status_test
      when: inventory_hostname in groups['ovn_riak_servers']
      failed_when: "'running' not in service_status_test.stdout"

    - name: check the status of service ovn_xdc_sync 
      shell: systemctl status ovn_xdc_sync
      register: service_status_test
      when: inventory_hostname in groups['ovn_xdc_sync']
      failed_when: "'running' not in service_status_test.stdout"

    - name: check the status of service cas-tools-server 
      shell: systemctl status cas-tools-server
      register: service_status_test
      when: inventory_hostname in groups['cas_tool']
      failed_when: "'running' not in service_status_test.stdout"

      #checking the status of ovn_multidc_sync to verify dual center connectivity
    - name: check the status of service ovn_multidc_sync 
      shell: systemctl status ovn_multidc_sync
      register: service_status_test
      when: inventory_hostname in groups['ovn_multidc_sync']
      failed_when: "'running' not in service_status_test.stdout"

      #checking if the ports are open for kafka
    - name: checking for port on kafka server is open
      wait_for:
        timeout: 3
        host: "{{ inventory_hostname }}"
        port: "{{ item }}"
      with_items: 
        - "{{ kafka_port }}"
        - "{{ client_ssl_port }}"
      when: inventory_hostname in groups['kafka']

      #checking if the ports are open for nomad_server
    - name: checking for port on nomad_server is open
      wait_for:
        timeout: 3
        host: "{{ inventory_hostname }}"
        port: "{{ item }}"
      with_items: 
        - "{{ nomad_server_http_port }}"
        - "{{ nomad_server_rpc_port }}"
      when: inventory_hostname in groups['nomad_server']
      
      #checking if the ports are open for hdfs namenodes
    - name: checking for port on hadoop_namenodes is open
      wait_for:
        timeout: 3
        host: "{{ inventory_hostname }}"
        port: "{{ item }}"
      with_items: 
        - "{{ hadoop_namenode_rpc_port }}"
        - "{{ hadoop_namenode_http_port }}"
      when: inventory_hostname in groups['hadoop_namenodes']
   
      #checking if the ports are open for hdfs datanodes  
    - name: checking for port on hadoop_datanode is open
      wait_for:
        timeout: 3
        host: "{{ inventory_hostname }}"
        port: "{{ item }}"
      with_items: 
        - "{{ hadoop_datanode_port }}"
        - "{{ hadoop_datanode_ipc_port }}"
        - "{{ hadoop_datanode_http_port }}"
      when: inventory_hostname in groups['hadoop_datanodes']      

      #checking if the ports are open for journalnodes
    - name: checking for port on journalnodes is open
      wait_for:
        timeout: 3
        host: "{{ inventory_hostname }}"
        port: "{{ item }}"
      with_items: 
        - "{{ hadoop_journalnode_edits_port }}"
        - "{{ hadoop_journalnode_http_port }}"
      when: inventory_hostname in groups['journalnodes'] 

      #checking if the filesystem is within limits (< 80%) on all servers
    - name: Testing disk space availablility
      assert:
        that:
            - item.mount != '/' or {{ item.mount == '/' and item.size_available > (item.size_total|float * 0.2) }}
      with_items: '{{ ansible_mounts }}'
      register: disk_free
    - fail:
      msg: 'Disk space needs attention.'
      when: disk_free|failed  
