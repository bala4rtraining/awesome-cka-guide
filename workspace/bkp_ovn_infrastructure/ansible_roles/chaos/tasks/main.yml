---
- name: create group for erl release
  when: not(username == "root")
  group: name={{username}} state=present

- name: create user for erl release
  when: not(username == "root")
  user: >
    name={{username}}
    groups={{username}}
    state=present
    home=/opt/{{name}}

- name: allow notty and sudoers entry for user
  when: (name == "chaos_agent") and not(username == "root") and run_elevated
  template: >
      src=sudoer.j2
      dest=/etc/sudoers.d/{{ username }}
      owner=root
      group=root

- name: safely stop the application if its running already
  command: /opt/{{name}}/bin/{{name}} stop
  register: stop_result
  until: not("stop_result.stdout.find('ok') == -1")
  failed_when:
    - "stop_result.rc not in [0, 1, 2]"

- name: ensure clean starting state A
  file: >
    path={{ item }}
    state=absent
  with_items:
    - /opt/{{name}}.tar.gz
    - /opt/{{name}}

- name: ensure clean starting state B
  file: >
    path=/opt/{{name}}
    state=directory

- name: fetch chaos artifact
  unarchive: >
    src="{{artifact_url}}"
    dest=/opt/{{name}}
    copy=no
    owner={{username}}
    group={{username}}

- name: chown work directory
  file: >
    path=/opt/{{name}}
    state=directory
    recurse=yes
    owner={{username}}
    group={{username}}

- name: version of release
  shell: ln -nsf $(. <(grep ^REL_VSN /opt/{{name}}/bin/{{name}}); echo $REL_VSN) /opt/{{name}}/releases/0.1.0-local.dev
  args:
    executable: /bin/bash

- name: vm args for chaos_agent
  when: name == "chaos_agent"
  template: >
    src=roles/chaos/templates/vm.args.j2
    dest=/opt/{{name}}/releases/0.1.0-local.dev/vm.args
    owner={{username}}
    group={{username}}

- name: start agent
  when: name == "chaos_agent"
  shell: PATH=$PATH:/opt/libfiu/bin /opt/{{name}}/bin/{{name}} start
  become_user: "{{username}}"

- name: vm args for chaos_coordinator
  when: name == "chaos_coordinator"
  template: >
    src=roles/chaos/templates/coordinator.args.j2
    dest=/opt/{{name}}/releases/0.1.0-local.dev/vm.args
    owner={{username}}
    group={{username}}

- name: sys config for chaos_coordinator
  when: name == "chaos_coordinator"
  template: >
    src=coordinator.sys.config.j2
    dest=/opt/{{name}}/releases/0.1.0-local.dev/sys.config
    owner={{username}}
    group={{username}}

- name: create rel directory
  when: name == "chaos_coordinator"
  file:
    path="/opt/chaos_coordinator/rel"
    state=directory
    owner={{username}}
    group={{username}}

- name: test spec
  when: name == "chaos_coordinator"
  template: >
    src=roles/chaos/templates/spec.config.j2
    dest=/opt/chaos_coordinator/rel/spec.config
    owner={{username}}
    group={{username}}

- name: start coordinator
  when: name == "chaos_coordinator"
  command: /opt/{{name}}/bin/{{name}} start
  register: coordinator_start_info
  failed_when:
    - "'Erlang is crashing' in coordinator_start_info.stderr"
    - "coordinator_start_info.rc != 0"
#  become_user: "{{username}}" doesn't start as this user?
