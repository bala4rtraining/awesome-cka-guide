---
- name: check whether intermediary files exists
  stat:
    path: "{{ vss_root_path }}/files"
  register: intermediary_files

- name: temporary move the current intermediary files
  command: "mv {{ vss_root_path }}/files {{ vss_root_path }}/files_bak"
  when: intermediary_files.stat.exists

- name: remove the vss from a remote repo
  yum:
    name: "vss"
    state: absent

- name: reinstall vss binaries rom a remote repo
  yum:
    name: "{{ artifactory_url }}/{{ artifactory_rpm_path }}/{{ vss_binaries_rpm }}"
    state: latest

- name: remove the vss wrapper from a remote repo
  yum:
    name: "vsswrapper"
    state: absent

- name: install the vsswrapper rpm from a remote repo
  yum:
    name: "{{ artifactory_url }}/{{ artifactory_rpm_path }}/{{ vsswrapper_rpm }}"
    state: latest

- name: change group of vss root folder to was
  file:
    path: "{{ vss_root_path }}"
    mode: 0750
    group: "{{ vss_username }}"
    owner: "{{ vss_username }}"
    recurse: yes

- name: change group of input folder to was
  file:
    path: "{{ vss_root_path }}/input"
    mode: 0700
    group: "{{ vss_username }}"
    owner: "{{ vss_username }}"
    recurse: yes

- name: change group of output folder to was
  file:
    path: "{{ vss_root_path }}/output"
    mode: 0700
    group: "{{ vss_username }}"
    owner: "{{ vss_username }}"
    recurse: yes

- name: change group of files folder to was
  file:
    path: "{{ vss_root_path }}/files"
    mode: 0700
    group: "{{ vss_username }}"
    owner: "{{ vss_username }}"
    recurse: yes

- name: change group of vssexe folder to was
  file:
    path: "{{ vss_root_path }}/vssexe"
    mode: 0750 # Need to be set to 750 so fluentbit can read the log files that's generated there
    group: "{{ vss_username }}"
    owner: "{{ vss_username }}"
    recurse: yes

- name: change permission of the VSSWrapper root path folder to be readable and executable by group (so fluentd can scrape its logs)
  file:
    path: "{{ vsswrapper_root_path }}"
    mode: 0750 # Need to be set to 750 so fluentbit can read the log files that's generated there
    group: "{{ vss_username }}"
    owner: "{{ vss_username }}"
    recurse: yes

- name: install the latest version of LFTP
  yum:
    name: lftp
    state: latest

- name: check whether VICA root file with .pem extension exists
  stat:
    path: "{{ vss_mvs_cert_file_pem }}"
  register: vica_pem

- name: generate lftprc with the .pem VICA root file
  template:
    src: "lftprc_pem.j2"
    dest: "/home/{{ vss_username }}/.lftprc"
    owner: "{{ vss_username }}"
    group: "{{ vss_username }}"
    mode: 0644
  when: vica_pem.stat.exists

- name: generate lftprc with the .crt VICA root file
  template:
    src: "lftprc_crt.j2"
    dest: "/home/{{ vss_username }}/.lftprc"
    owner: "{{ vss_username }}"
    group: "{{ vss_username }}"
    mode: 0644
  when: vica_pem.stat.exists == False

- name: inject vars to shell script
  template:
    src: "{{ item }}.j2"
    dest: "/opt/app/vss/vssexe/{{ item }}"
    owner: "{{ vss_username }}"
    group: "{{ vss_username }}"
    mode: 0700
  with_items:
    - configInit.sh
    - fetchConfig.sh
    - generateReport.sh
    - ftpsput.sh
    - pushoutputlogs.sh

- name: inject vars to configs
  template:
    src: "{{ item }}.j2"
    dest: "{{ vsswrapper_root_path }}/config/{{ item }}"
    owner: "{{ vss_username }}"
    group: "{{ vss_username }}"
    mode: 0644
  with_items:
    - vsswrapper.yml
    - core-site.xml

- name: inject vars to nomad jobs
  template:
    src: "{{ item }}.j2"
    dest: "/opt/app/vss/nomad/{{ item }}"
    owner: "{{ vss_username }}"
    group: "{{ vss_username }}"
    mode: 0644
  with_items:
    - configInitNomad.nomad
    - configRunNomad.nomad
    - runVSSWrapper.nomad

- name: setting HADOOP_CONF_DIR and HADOOP_USER_NAME
  template:
    src: runVSSWrapper.sh.j2
    dest: "{{ vsswrapper_root_path }}/bin/runVSSWrapper.sh"
    owner: "{{ vss_username }}"
    group: "{{ vss_username }}"
    mode: 0700

- name: find all shell scripts
  find:
    paths: /opt/app/vss/vssexe
    patterns: "*.sh"
  register: scripts

- name: converting carriage return to make the scripts unix compatible
  replace:
    path: "{{ item['path'] }}"
    regexp: "\r$"
    replace: ""
  with_items: "{{ scripts.files }}"

- name: check whether there was a backed-up intermediary files
  stat:
    path: "{{ vss_root_path }}/files_bak"
  register: files_backup

- name: remove the installed intermediary files
  file:
    path: "{{ vss_root_path }}/files"
    state: "absent"
  when: files_backup.stat.exists

- name: restore the backed-up intermediary files
  command: "mv {{ vss_root_path}}/files_bak {{ vss_root_path }}/files"
  when: files_backup.stat.exists

- name: submit nomad jobs
  shell: "{{ vss_nomad_client_path }} run -ca-cert={{ vss_nomad_cert_path }}/nomad-ca.pem -client-cert={{ vss_nomad_cert_path }}/cli.pem -client-key={{ vss_nomad_cert_path }}/cli-key.pem --address=https://{{ hostvars[nomad_ip]['ansible_nodename'] }}:{{ vss_nomad_http_port }} /opt/app/vss/nomad/{{ item }}.nomad"
  args:
    executable: /bin/bash
  run_once: true
  register: retvals
  with_items:
  - configInitNomad
  - configRunNomad
  - runVSSWrapper
  when : enable_tls_nomad

- name: submit nomad jobs
  shell: "{{ vss_nomad_client_path }} run --address=http://{{nomad_ip}}:{{ vss_nomad_http_port }} /opt/app/vss/nomad/{{ item }}.nomad"
  args:
    executable: /bin/bash
  run_once: true
  register: retvals
  with_items:
  - configInitNomad
  - configRunNomad
  - runVSSWrapper
  when : not enable_tls_nomad

- debug:
    msg: "{{ item }}"
  with_items: " {{ retvals.results }}"
