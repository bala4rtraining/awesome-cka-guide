{# Python script to create datasource given the json files #}

import json
import sys
import subprocess
import re

CACert = ""
ClientCert = ""
ClientKey = ""
prometheus_mode =  {'active':'A-active','lt-active':'B-active','standby':'A-standby','lt-standby':'B-standby'}


{% for host in groups.prometheus_server|default ( {} ) %}

env_url = ""
{% if nginx_enable_ssl == "true" %}
env_url += "https://"
{% else %}
env_url += "http://"
{% endif %}

{% if hostvars[host].ansible_fqdn is defined and prometheus_use_fqdn == "true" %}
env_url += "{{ hostvars[host].ansible_fqdn }}"+":8443/"+"{{prometheus_context_path}}"
{% else %}
env_url += "{{ hostvars[host].inventory_hostname }}"+":8443/"+"{{prometheus_context_path}}"
{% endif %}


{% if nginx_enable_ssl == "true" %}
ca_cert_command = """ awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' /etc/pki/tls/certs/bundle.pem"""
try:
    CACert = subprocess.check_output(ca_cert_command, shell=True)
except:
    print ("CA Cert not found in /etc/pki/tls/certs/")
client_cert_command = """ awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' /etc/pki/tls/certs/""" + """{{inventory_hostname}}.pem"""
try:
    ClientCert = subprocess.check_output(client_cert_command, shell=True)
except:
    print ("Client Cert not found in /etc/pki/tls/certs/")
private_key = """ awk 'NF {sub(/\r/, ""); printf "%s\\n",$0;}' /etc/pki/tls/private/""" + """{{inventory_hostname}}.pem"""
try:
    ClientKey = subprocess.check_output(private_key, shell=True)
except:
    print ("ClientKey not found in /etc/pki/tls/private/")
{% endif %}

data = {}
data['name'] = "{{environment_name|upper}}Prometheus-"+prometheus_mode['{{hostvars[host]['prometheus_mode']}}']
data['type'] = "prometheus"
data['url'] = env_url
data['access'] = "proxy"
data['basicAuth'] = False
data['isDefault'] = False
data['jsonData'] = {"tlsAuth":{{nginx_enable_ssl|bool}},"tlsAuthWithCACert":{{nginx_enable_ssl|bool}}}
data['secureJsonData'] = {"tlsCACert":CACert ,"tlsClientCert":ClientCert,"tlsClientKey":ClientKey}

json_data = json.dumps(data, encoding="utf-8")
json_data = json.loads(json_data)

file = '{{ grafana_datasource_json_path }}/datasource_{{host}}.json'
with open(file, 'w') as outfile:
    json.dump(json_data, outfile)

{% endfor %}