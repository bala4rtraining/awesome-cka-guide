---
# tasks file for elasticsearch searchguard plugin deployment
- name: Adding existing user {{ elasticsearch_user }} to group {{ cert_group }}
  user: 
    name: "{{ elasticsearch_user }}"
    groups: "{{ elasticsearch_group }}"
    append: "yes"

- name: Ensuring the elasticsearch folder is existing at destination machine
  file:
    path: "{{ elasticsearch_install_dir }}"
    state: directory
    mode: "0755"

- name: Create download folder if not existing.
  file:
    path: "{{ searchguard_download_dir }}"
    state: directory
    mode: "0755"

- name: Verify zip is existing in the path
  stat:
    path: "{{ searchguard_download_dir }}/{{ searchguard_zip_file_name }}"
  register: file_status

- name: Download the searchguard zip from artifact url location with rw permissions
  get_url:
    url: "{{ searchguard_artifact_url }}"
    dest: "{{ searchguard_download_dir }}"
    validate_certs: false
    mode: "0644"
  when: not file_status.stat.exists

- name: Re-verify zip file existance at the path to check if we have downloaded
  stat:
    path: "{{ searchguard_download_dir }}/{{ searchguard_zip_file_name }}"
  register: file_status

- name: Stop elasticsearch service, only if all the above steps are successfull
  service: name=elasticsearch state=stopped

- name: Command to install(if it is not already installed) search-guard plugin for elasticsearch
  command: "{{ elasticsearch_install_dir }}/bin/elasticsearch-plugin install -b file:{{ searchguard_download_dir }}/{{ searchguard_zip_file_name }}"
  args:
    chdir: "{{ searchguard_install_dir }}/plugins"
    creates: "{{ searchguard_install_dir }}/plugins/{{ searchguard_package_name }}"

- name: Delete the zip file from tmp directory
  file:
    path: "{{ searchguard_download_dir }}/{{ searchguard_zip_file_name }}"
    state: absent

- name: Verify if plugin installation is successfull
  stat:
    path: "{{ searchguard_install_dir }}/plugins/{{ searchguard_package_name }}"
  register: file_status

- name: Backup old elasticeasrch.yml file , change later
  command: "cp -f {{ elasticsearch_config_dir }}/elasticsearch.yml {{ elasticsearch_config_dir }}/elasticsearch-{{ lookup('pipe', 'date +%Y-%m-%d-%H:%M:%S') }}.yml"

- name: Apply elasticsearch with searchguard config templates
  template: src=elasticsearch_with_searchguard.yml.j2 dest={{ elasticsearch_config_dir }}/elasticsearch.yml

- name: Change user and group to elasticsearch directory
  file:
    dest: "{{ elasticsearch_config_dir }}"
    state: directory
    recurse: "yes"
    owner: "{{ elasticsearch_user }}"
    group: "{{ elasticsearch_group }}"  

- name: Command to allow anonymous auth for elasticsearch by updating sg_config.yml
  template: src=sg_config.yml.j2 dest={{ elasticsearch_install_dir }}/plugins/{{ searchguard_package_name }}/sgconfig/sg_config.yml

- name: Add execute permissions for sgadmin script
  file: path={{ searchguard_install_dir }}/plugins/{{ searchguard_package_name }}/tools/sgadmin.sh
        state=touch
        mode=0744

- name: Bounce/start elasticsearch service
  service: name=elasticsearch state=restarted enabled=yes

- name: Command to update sg_roles_mapping.yml file to allow http access
  template: src=sg_roles_mapping.yml.j2 dest={{ elasticsearch_install_dir }}/plugins/{{ searchguard_package_name }}/sgconfig/sg_roles_mapping.yml

- name: Wait for elasticsearch node to come back up
  wait_for: port={{ elasticsearch_port }} delay=35 host={{ inventory_hostname }}

- name: Command to initialize sg_admin
  command: "{{ searchguard_install_dir }}/plugins/{{ searchguard_package_name }}/tools/sgadmin.sh -h {{ inventory_hostname }} -cd {{ searchguard_install_dir }}/plugins/{{ searchguard_package_name }}/sgconfig/ -cacert {{ elasticsearch_client_ca_cert_path }} -cert {{ elasticsearch_client_cert_path }} -key {{ elasticsearch_client_key_path }} {{ searchguard_admin_command_args }}"
  when: 
    - not rolling_upgrade
    - hostvars[inventory_hostname].eserv_type == "lbonly" 
  
