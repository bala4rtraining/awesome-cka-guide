@Library('ovn-shared-library') _
pipeline {
  agent {
    docker {
      image 'ovn-docker.artifactory.trusted.visa.com/centos7_ovn_docker'
      label 'ovn_build'
      args '-v /sys/fs/cgroup:/sys/fs/cgroup -v /home/was/.ssh:/home/'
    }
  }

  options {
      buildDiscarder(logRotator(numToKeepStr: '95'))
  }

  environment {
    CLUSTER = "int-epic15"
    DATACENTER1 = 'dc1'
    DATACENTER2 = 'dc2'
  }

  stages {
    stage('Checkout SCM') {
          steps{
          git credentialsId: 'ENV.root_key', branch: "master", url: 'ssh://git@stash.trusted.visa.com:7999/op/ovn_infrastructure.git'
          }
      }

    stage('stop') {
      steps {
            ansiColor('xterm') {
              ansiblePlaybook colorized: true, credentialsId: "ENV.root_key", inventory: "inventories/${env.CLUSTER}/${env.DATACENTER1}", playbook: 'ansible_ovn/stop_hadoop_cluster.yml'
              ansiblePlaybook colorized: true, credentialsId: "ENV.root_key", inventory: "inventories/${env.CLUSTER}/${env.DATACENTER2}", playbook: 'ansible_ovn/stop_hadoop_cluster.yml'
            }
      }
    }

    stage('init') {
      steps {
            ansiColor('xterm') {
              ansiblePlaybook colorized: true, credentialsId: "ENV.root_key", inventory: "inventories/${env.CLUSTER}", playbook: 'ansible_ovn/set_cluster_facts_infra.yml', extras: '-e DATACENTER="${DATACENTER1}"'
              ansiblePlaybook colorized: true, credentialsId: "ENV.root_key", inventory: "inventories/${env.CLUSTER}", playbook: 'ansible_ovn/set_cluster_facts_infra.yml', extras: '-e DATACENTER="${DATACENTER2}"'
            }
      }
    }

    stage('clean'){
      steps {
            ansiColor('xterm') {
              ansiblePlaybook colorized: true, credentialsId: "ENV.root_key", inventory: "inventories/${env.CLUSTER}/${env.DATACENTER1}", playbook: 'ansible_ovn/clean_hadoop.yml', extras: '-e hadoop_reinstall=true'
              ansiblePlaybook colorized: true, credentialsId: "ENV.root_key", inventory: "inventories/${env.CLUSTER}/${env.DATACENTER2}", playbook: 'ansible_ovn/clean_hadoop.yml', extras: '-e hadoop_reinstall=true'
            }
      }
    }

    stage('zookeeper-deploy') {
      steps {
        parallel(
          'zookeeper-dc1': {
            ansiColor('xterm') {
              ansiblePlaybook colorized: true, credentialsId: "ENV.root_key", inventory: "inventories/${env.CLUSTER}/${env.DATACENTER1}", playbook: 'ansible_zookeeper/provision.yml'
            }
          },
          'zookeeper-dc2': {
            ansiColor('xterm') {
              ansiblePlaybook colorized: true, credentialsId: "ENV.root_key", inventory: "inventories/${env.CLUSTER}/${env.DATACENTER2}", playbook: 'ansible_zookeeper/provision.yml'
            }
          }
        )
      }
    }

    stage('kafka-deploy') {
      steps {
        parallel(
          'kafka-dc1': {
            ansiColor('xterm') {
              ansiblePlaybook colorized: true, credentialsId: "ENV.root_key", inventory: "inventories/${env.CLUSTER}/${env.DATACENTER1}", playbook: 'ansible_kafka/site.yml'
            }
          },
          'kafka-dc2': {
            ansiColor('xterm') {
              ansiblePlaybook colorized: true, credentialsId: "ENV.root_key", inventory: "inventories/${env.CLUSTER}/${env.DATACENTER2}", playbook: 'ansible_kafka/site.yml'
            }
          }
        )
      }
    }

    stage('nomad-deploy') {
      steps {
        parallel(
          'nomad-dc1': {
            ansiColor('xterm') {
              ansiblePlaybook colorized: true, credentialsId: "ENV.root_key", inventory: "inventories/${env.CLUSTER}/${env.DATACENTER1}", playbook: 'ansible_ovn/deploy_nomad.yml', extras: '-e @config/test1.vars.secret.yml'
            }
          },
          'nomad-dc2': {
            ansiColor('xterm') {
              ansiblePlaybook colorized: true, credentialsId: "ENV.root_key", inventory: "inventories/${env.CLUSTER}/${env.DATACENTER2}", playbook: 'ansible_ovn/deploy_nomad.yml', extras: '-e @config/test2.vars.secret.yml'
            }
          }
        )
      }
    }
  }
}
