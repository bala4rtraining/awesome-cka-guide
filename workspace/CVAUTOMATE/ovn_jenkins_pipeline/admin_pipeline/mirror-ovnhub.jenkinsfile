pipeline {
  agent {
    label 'master'
  }
  environment {
    OVNHUB_URL = 'ssh://git@stash.trusted.visa.com:7999/ovnhub'
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '15'))
  }
  triggers {
    cron('H */4 * * *')
  }
  stages {
    stage('prepare') {
      steps {
        git url: 'ssh://git@stash.trusted.visa.com:7999/op/ovn2.git'
      }
    }
    stage('mirror') {
      steps {
        script {
          def repos = sh(script: '''echo -n $(for x in $(grep repo glide.yaml | grep ovnhub | cut -f4 -d' '); do basename $x; done)''', returnStdout: true)
          def nodes = [:]
          for (nodeName in nodeNames('ovn_build')) {
            def name = nodeName
            nodes[name] = {
              node(name) {
                sh """
                cd /opt/app/ovnhub
                echo "repos:" > mirrors.yaml.tmp
                for repo in $repos; do
                  if [ ! -d "\${repo%.git}.git" ]; then
                    git clone --mirror "$OVNHUB_URL/\${repo%.git}.git"
                  else
                    (cd "\${repo%.git}.git"; git remote update)
                  fi
                  cat >> mirrors.yaml.tmp <<EOF
- original: $OVNHUB_URL/\$repo
  repo: /opt/app/ovnhub/\${repo%.git}.git
  vcs: git
EOF
                done
                cp mirrors.yaml.tmp mirrors.yaml
                rm -f mirrors.yaml.tmp
                cat mirrors.yaml
                """
              }
            }
          }
          parallel nodes
        }
      }
    }
  }
}

@NonCPS
def nodeNames(label) {
  def res = new groovy.json.JsonSlurperClassic().parseText(new URL("${env.JENKINS_URL}/label/${label}/api/json").getText())
  return res.nodes.collect { node ->
    node.nodeName
  }
}
