pipeline {
    agent {
        docker {
            image 'ovn-docker.artifactory.trusted.visa.com/centos7_ovn_docker'
            label 'ovn_build'
            args '-v /sys/fs/cgroup:/sys/fs/cgroup -v /home/was/.ssh:/home/was/.ssh'
        }
    }

    parameters {

        choice(name: 'SERVICE_NAME',
               choices: 'ovn_clearing_jobs\novn_clearing_xdc_sync\novn_cas_tools\novn_cas_ui\novn_nginx_auth\novn2\novn_riak_persistence',
               description: 'What service do you want to create a new Release Candidate for?')

        validatingString(name: 'RELEASE_VERSION',
                        defaultValue: '',
                        regex: '^[0-9]+\\.[0-9]+\\.[0-9]+$',
                        failedValidationMessage: 'Please ,kindly follow this format 0.2.16',
                        description: 'What is the version that this Release Candidate belongs to? Use semantic versioning, e.g: x.y.z')

    }

    environment {
        RELEASE_BRANCH = "release-${params.RELEASE_VERSION}"
        TMP_DIR = "${SERVICE_NAME}_repo"
        REPOSITORY_URL = "ssh://git@stash.trusted.visa.com:7999/op/${SERVICE_NAME}.git"
        FINAL_RELEASE_TAG = "v${params.RELEASE_VERSION}"

    }

    stages {
        stage ('Finalize single release') {
        when {
                            expression {
                                       params.SERVICE_NAME == 'ovn_clearing_jobs' ||
                                       params.SERVICE_NAME == 'ovn_clearing_xdc_sync' ||
                                       params.SERVICE_NAME == 'ovn_riak_persistence'
                            }
        }
            steps {
                checkout poll: false, scm: [$class: 'GitSCM',
                                            branches: [[name: "${RELEASE_BRANCH}"]],
                                            doGenerateSubmoduleConfigurations: false,
                                            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${TMP_DIR}"]],
                                            submoduleCfg: [],
                                            userRemoteConfigs: [[url: "${REPOSITORY_URL}"]]]
                sh 'cd ${TMP_DIR}/ && git push --delete origin $(git describe --tags $(git rev-list --tags --max-count=1))'
                sh "cd ${TMP_DIR}/ && git tag -a -m \"Final Release ${params.RELEASE_VERSION} for ${SERVICE_NAME}\" ${FINAL_RELEASE_TAG}"
                sh "cd ${TMP_DIR}/ && git push origin ${FINAL_RELEASE_TAG}"
                build job: "OVN-OP/${SERVICE_NAME}/${RELEASE_BRANCH}", parameters: [
                    booleanParam(name: 'BUILD_AND_PUBLISH', value: true)
                ]
            }
        }

        stage ('finalise single release for golang repo') {
        when {
                                expression { params.SERVICE_NAME == 'ovn_cas_tools' ||
                                             params.SERVICE_NAME == 'ovn_cas_ui' ||
                                             params.SERVICE_NAME == 'ovn_nginx_auth'
                                }

            }
            steps{
                checkout poll: false, scm: [$class: 'GitSCM',
                                            branches: [[name: "${RELEASE_BRANCH}"]],
                                            doGenerateSubmoduleConfigurations: false,
                                            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "${TMP_DIR}"]],
                                            submoduleCfg: [],
                                            userRemoteConfigs: [[url: "${REPOSITORY_URL}"]]]
                sh "cd ${TMP_DIR}/ && git checkout -b ${RELEASE_BRANCH}"
                sh 'cd ${TMP_DIR}/ && jq --arg value ${RELEASE_VERSION} \'.version=$value\' package.json > package.tmp && mv package.tmp package.json && cat package.json'
                sh "cd ${TMP_DIR}/ && git add package.json && git commit -m \"modify package.json for release ${params.RELEASE_VERSION}\""
                sh 'cd ${TMP_DIR}/ && git push --delete origin $(git describe --tags $(git rev-list --tags --max-count=1))'
                sh "cd ${TMP_DIR}/ && git tag -a -m \"Final Release ${params.RELEASE_VERSION} for ${SERVICE_NAME}\" ${FINAL_RELEASE_TAG}"
                sh "cd ${TMP_DIR}/ && git push origin ${FINAL_RELEASE_TAG} && git push origin ${RELEASE_BRANCH}"

                build job: "OVN-OP/${SERVICE_NAME}/${RELEASE_BRANCH}", parameters: [
                    booleanParam(name: 'BUILD_AND_PUBLISH', value: true)
                ]
            }
        }
    }
}
