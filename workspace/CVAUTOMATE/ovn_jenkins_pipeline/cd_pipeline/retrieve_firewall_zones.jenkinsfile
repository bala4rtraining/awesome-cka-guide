@Library('ovn-shared-library') _

pipeline {
    agent {
        docker {
            image 'ovn-docker.artifactory.trusted.visa.com/centos7_ovn_docker'
            label 'ovn_build'
            args '-v /sys/fs/cgroup:/sys/fs/cgroup -v /home/was/.ssh:/home/was/.ssh'
        }
    }
    options {
        ansiColor('xterm')
        timeout(time: 10, unit: 'MINUTES')
        buildDiscarder(logRotator(daysToKeepStr: '60'))
    }
    
    stages{
         stage('set cluster variables') {
      // boilerplate for stage must be the first stage
      // in all the cd pipeline jobs.
      // (see ovn_infrastructure/vars and ovn_infrastructure/src directory for shared libraries)
        steps {
         setClusterAndDatacenter(env);
        }
    }
    	stage('checkout SCM'){
      	    steps{
        	git credentialsId: 'ENV.root_key', url: 'ssh://git@stash.trusted.visa.com:7999/op/ovn_app_infrastructure.git', branch: "${RELEASE_BRANCH}"
      		}
    	}
        stage('invoke print rules csv playbook'){
            steps{
                ansiColor('xterm'){
                    ansiblePlaybook credentialsId: 'ENV.root_key', inventory: "inventories/${env.CLUSTER}/${env.DATACENTER}", colorized: true, playbook: 'ansible_ovn/retrieve_firewall_zones.yml', sudoUser: null
                }
            }
        }
        stage('append service names using ovn_application_ports.yml'){
            steps{
                script{
                    sh """pwd;
                    awk \'NR == FNR{ gsub(/[:"]/, ""); len = split(\$2, a, "-"); for (i=1; i<=len; i++) ports[a[i]] = \$1; next } \$2 in ports{ print \$0, ports[\$2] }\' app_vars/ovn_application_ports.yml FS=\',\' OFS=\',\' /tmp/firewall_rules.csv > "firewall_rules_${env.CLUSTER}_${env.DATACENTER}.csv"
                    sed -i '1iPROTOCOL, PORT, SOURCEIP, DESTINATIONIP, SERVICENAME' "firewall_rules_${env.CLUSTER}_${env.DATACENTER}.csv"
                    rm -rf /tmp/firewall_xml/*
                    rm -rf /tmp/csv/*
                    rm /tmp/firewall_rules.csv
                """
                }
            }    
        }
        
        stage('archiving artifacts - firewall.csv') {
       steps{
            archiveArtifacts "firewall_rules_${env.CLUSTER}_${env.DATACENTER}.csv"

            }
        } 

    }
}
