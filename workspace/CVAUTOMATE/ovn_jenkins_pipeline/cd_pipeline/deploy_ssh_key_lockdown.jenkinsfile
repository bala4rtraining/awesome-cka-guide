@Library('ovn-shared-library') _

pipeline {
  agent {
    docker {
      image 'ovn-docker.artifactory.trusted.visa.com/centos7_ovn_docker'
      label 'ovn_build'
      args '-v /sys/fs/cgroup:/sys/fs/cgroup -v /home/was/.ssh:/home/was/.ssh'
    }
  }

  parameters {
        string(name: 'target', defaultValue: '', description: 'enter ipaddress separated by comma')
        string(name: 'branch', defaultValue: '', description: 'Enter the release branch details')
        booleanParam(name: 'deploy_script', defaultValue: false, description: 'select the checkbox to deploy script')
        booleanParam(name: 'rollback_script', defaultValue: false, description: 'select the checkbox to roll back script')
  } 

  options {
    buildDiscarder(logRotator(numToKeepStr: '15'))
  }

  stages {
    stage('set cluster variables') {
      // boilerplate for stage must be the first stage
      // in all the cd pipeline jobs.
      // (see ovn_infrastructure/vars and ovn_infrastructure/src directory for shared libraries)
      steps {
        setClusterAndDatacenter(env);
      }
    }
    stage('checkout SCM'){
      steps{
        git credentialsId: 'ENV.root_key', url: 'ssh://git@stash.trusted.visa.com:7999/op/ovn_infrastructure.git', branch: "${params.branch}"
      }
    }
    //
    stage('deploy-ssh-script') {
      when { expression { return params.deploy_script } }  
      steps {
        ansiColor('xterm') {
          ansiblePlaybook colorized: true, credentialsId: 'ovncd_ssh_key', inventory: "inventories/${env.CLUSTER}/${env.DATACENTER}", playbook: 'ansible_ovn/deploy_ssh_key_lockdown_script.yml', extras: '--extra-vars \'{target_hosts: "$target"}\' --become'

        }
      }
    }
    
    stage('rollback_script') {
      when { expression { return params.rollback_script } }  
      steps {
        ansiColor('xterm') {
          ansiblePlaybook colorized: true, credentialsId: 'ovncd_ssh_key', inventory: "inventories/${env.CLUSTER}/${env.DATACENTER}", playbook: 'ansible_ovn/rollback_ssh_key_lockdown_script.yml', extras: '--extra-vars \'{target_hosts: "$target"}\' --become'
        
        }
      }
    }
  }
}  
