@Library('ovn-shared-library') _

pipeline {
  agent {
    docker {
      image 'ovn-docker.artifactory.trusted.visa.com/centos7_ovn_docker'
      label 'ovn_build'
      args '-v /sys/fs/cgroup:/sys/fs/cgroup -v /home/was/.ssh:/home/was/.ssh'
    }
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '15'))
  }

  parameters {
      string(defaultValue: "", description: "Branch name", name: "branch")
      string(defaultValue: "", description: "Target host IP(s) where you would like to perform elasticsearch upgrade", name: "es_node")
      string(defaultValue: "", description: "Artifactory URL", name: "artifactory_url")
      string(defaultValue: "", description: "Download Path URL", name: "download_path_url")
      choice(choices: "cluster_shutdown\nisolated_node_upgrade\nisolated_node_restore\ncluster_upgrade\ncluster_restore", description: "Select appropriate action", name: "action")
  }

  stages {
    stage('set_cluster_variables') {
      // boilerplate for stage must be the first stage
      // in all the cd pipeline jobs.
      // (see ovn_infrastructure/vars and ovn_infrastructure/src directory for shared libraries)
      steps {
        setClusterAndDatacenter(env);
      }
    }
   
    //upgrade elasticsearch node
    stage('upgrade_elasticsearch_node') {
      steps {
        ansiColor('xterm') {
          checkout([$class: 'GitSCM', branches: [[name: "$branch"]], userRemoteConfigs: [[url: 'ssh://git@stash.trusted.visa.com:7999/op/ovn_infrastructure.git']]])
          ansiblePlaybook colorized: true, credentialsId: 'ENV.root_key', inventory: "inventories/${env.CLUSTER}/${env.DATACENTER}", playbook: 'ansible_ovn/upgrade_elastic_isolated.yml', extras: "-e es_node=$es_node -e artifactory_url=$artifactory_url -e download_path_url=$download_path_url -e action=$action -e @config/${env.ENV}.vars.secret.yml --vault-password-file ~/.vault-${env.ENV}"
        }
      }
    }
  }
}
