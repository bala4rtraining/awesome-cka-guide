@Library('ovn-shared-library') _

pipeline {
    agent {
        docker {
            image 'ovn-docker.artifactory.trusted.visa.com/centos7_ovn_docker'
            label 'ovn_build'
            args '-v /sys/fs/cgroup:/sys/fs/cgroup -v /home/was/.ssh:/home/was/.ssh'
        }
    }

    parameters {

        string(      name: 'OVN_CLEARING_JOBS_TARBALL',       defaultValue: '', description: 'Update reference for OVN_CLEARING_JOBS?')
        string(      name: 'OVN_CLEARING_XDC_SYNC_TARBALL',   defaultValue: '', description: 'Update reference for OVN_CLEARING_XDC_SYNC?')
        string(      name: 'OVN_CAS_TOOLS_TARBALL',           defaultValue: '', description: 'Update reference for OVN_CAS_TOOLS?')
        string(      name: 'OVN_CAS_UI_TARBALL',              defaultValue: '', description: 'Update reference for OVN_CAS_UI?')
        string(      name: 'OVN_NGINX_AUTH_TARBALL',          defaultValue: '', description: 'Update reference for OVN_NGINX_AUTH?')
        string(      name: 'OVN2',                            defaultValue: '', description: 'Update reference for OVN_NGINX_AUTH?')
        validatingString(name: 'RELEASE_VERSION', defaultValue: '', regex: '^[0-9]+\\.[0-9]+\\.[0-9]+$', failedValidationMessage: 'Please ,kindly follow this format 0.2.16',
        description: 'What is the release branch where this manifest should be updated?')

        choice(name: 'ENVIRONMENT',
               choices: 'general\ndev\nintegration\nhdfs-test\ntest\nqat',
               description: 'Is this meant to overwrite an environment specific release manifest file? If so, do specify which')
    }

    stages {

        stage('checkout SCM'){
            steps{
                git branch: 'release-${RELEASE_BRANCH}', credentialsId: 'ENV.root_key', url: 'ssh://git@stash.trusted.visa.com:7999/op/ovn_infrastructure.git'
            }
        }


        stage ('Update general release_manifest') {
            when {
              expression { params.ENVIRONMENT == "general" }
            }
            steps {
               sh '''

                  sh  jenkins-sh/release_update_manifest.sh ovn_vars/release_manifest.yml
                  '''
                  archiveArtifacts 'ovn_vars/release_manifest.yml'
            }
        }

        stage ('Environment specific release_manifest') {
            when {
                expression { ENVIRONMENT ==~ /(dev|hdfs-test|qat|integration)/ }
            }
            steps {
                sh '''
                  sh jenkins-sh/release_update_manifest.sh ovn_vars/$ENVIRONMENT/release_manifest.yml

                  '''
                  archiveArtifacts 'ovn_vars/$ENVIRONMENT/release_manifest.yml'
            }
        }

    }


    post {
      success {
         withCredentials([sshUserPrivateKey(credentialsId: 'stash', keyFileVariable: 'SSH_KEY')]) {
              sh '''
                rE1='(^[0-9]+\\.[0-9]+\\.[0-9]+$)'
                rE2='(^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]$)'
                if [[ ${RELEASE_BRANCH} =~ $rE1 ]] || [[ ${RELEASE_BRANCH} =~ $rE2 ]]; then
                   git checkout -B release-${RELEASE_BRANCH}
                   git fetch origin release-${RELEASE_BRANCH}:release-${RELEASE_BRANCH} || true
                   git add .
                   git commit -q -m "release_manifest.yml: Update with new parameters" || true
                   git push -f origin release-${RELEASE_BRANCH}
                else
                   echo "Invalid version number, No branch created"
                   exit 1
                fi
         '''
         }
      }
    }

}
